@model LinkUp.Application.ViewModels.Battleship.MyPlacementVm
@{
    ViewData["Title"] = "Colocación de barcos";
    var size = Model.BoardSize <= 0 ? 12 : Model.BoardSize;
    var pending = Model.PendingShips?.ToList() ?? new List<string> { "Carrier", "Battleship", "Cruiser", "Submarine", "Destroyer" };
}

<link rel="stylesheet" href="~/css/battleship.css" />

<h2 class="mb-3">Colocación de barcos</h2>

@if (pending.Count == 0)
{
    <div class="alert alert-success">
        Has colocado todos tus barcos. Espera a tu oponente para iniciar la fase de ataque.
    </div>
}
else
{
    <div class="alert alert-info">
        Selecciona un barco del listado y colócalo en el tablero.
    </div>
}

<div class="row g-4 align-items-start">
    <!-- Tablero -->
    <div class="col-12 col-md-auto">
        <div id="board" style="--cells:@size;">
            @for (var r = 0; r < size; r++)
            {
                for (var c = 0; c < size; c++)
                {
                    var hasShip = Model.MyShips[r, c];
                    <button type="button"
                            class="cell btn p-0 @(hasShip ? "occupied" : "btn-light")"
                            data-row="@r" data-col="@c"
                            aria-label="fila @r, col @c">
                    </button>
                }
            }
        </div>
    </div>

    <!-- Panel lateral -->
    <div class="col-12 col-md-5 col-lg-4">
        <div class="card shadow-sm">
            <div class="card-body">
                <h5 class="card-title mb-3">Seleccionar barco</h5>

                <form id="shipSelectorForm" class="mb-3">
                    <select id="shipSelect" class="form-select" required>
                        <option value="">-- Selecciona un barco --</option>
                        @foreach (var ship in pending)
                        {
                            <option value="@ship">@ship</option>
                        }
                    </select>
                </form>

                <div class="mb-3">
                    <label class="form-label d-block">Dirección</label>
                    <div class="btn-group" role="group">
                        <input type="radio" class="btn-check" name="direction" id="dirH" value="Right" autocomplete="off" checked>
                        <label class="btn btn-outline-primary" for="dirH">Horizontal</label>

                        <input type="radio" class="btn-check" name="direction" id="dirV" value="Down" autocomplete="off">
                        <label class="btn btn-outline-primary" for="dirV">Vertical</label>
                    </div>
                    <div class="form-text">Usa <kbd>H</kbd>/<kbd>V</kbd> para cambiar dirección.</div>
                </div>

                <div class="mb-3 small text-muted">
                    Vista previa: <span class="text-success fw-semibold">verde</span> = válido,
                    <span class="text-danger fw-semibold">rojo</span> = inválido.
                </div>

                <button class="btn btn-outline-secondary" onclick="history.back()">Volver</button>
            </div>
        </div>
    </div>
</div>

<form id="placeForm" method="post" action="@Url.Action("PlaceShip","Battleship")" class="d-none">
    @Html.AntiForgeryToken()
    <input type="hidden" name="GameId" value="@Model.GameId" />
    <input type="hidden" name="ShipType" />
    <input type="hidden" name="Row" />
    <input type="hidden" name="Col" />
    <input type="hidden" name="Direction" />
</form>

@section Scripts {
    <script>
        (() => {
            const size = @size;

            //tamano de todos los barcos conocidos
            const SHIP_LENGTH = {
                Carrier: 5,
                Battleship: 4,
                Cruiser: 3,
                Submarine: 3,
                Destroyer: 2,
                Size5: 5,
                Size4: 4,
                Size3A: 3,
                Size3B: 3,
                Size2: 2
            };

            //obtener dinámicamente la longitud del barco seleccionado
            function getLength() {
                return SHIP_LENGTH[selectedShip] ?? 3;
            }

            const form  = document.getElementById('placeForm');
            const board = document.getElementById('board');
            const cells = [...board.querySelectorAll('.cell')];
            const select = document.getElementById('shipSelect');

            let direction = 'Right';
            let selectedShip = '';

            const get = (r,c) => board.querySelector(`.cell[data-row="${r}"][data-col="${c}"]`);
            const inBounds = (r,c) => r >= 0 && r < size && c >= 0 && c < size;
            const isOccupied = (r,c) => get(r,c)?.classList.contains('occupied');

            function clearPreview() {
                cells.forEach(el => el.classList.remove('preview-ok','preview-bad'));
            }

            function footprint(row, col) {
                const len = getLength();
                const fp = [];
                for (let i = 0; i < len; i++) {
                    const rr = direction === 'Right' ? row : row + i;
                    const cc = direction === 'Right' ? col + i : col;
                    fp.push([rr,cc]);
                }
                return fp;
            }

            function validate(fp) {
                for (const [r,c] of fp) {
                    if (!inBounds(r,c)) return false;
                    if (isOccupied(r,c)) return false;
                }
                return true;
            }

            function renderPreview(fp, ok) {
                for (const [r,c] of fp) {
                    const cell = get(r,c);
                    if (!cell) continue;
                    cell.classList.add(ok ? 'preview-ok' : 'preview-bad');
                }
            }

            board.addEventListener('mousemove', e => {
                const cell = e.target.closest('.cell');
                if (!cell || !selectedShip) return;
                clearPreview();
                const fp = footprint(+cell.dataset.row, +cell.dataset.col);
                renderPreview(fp, validate(fp));
            });

            board.addEventListener('mouseleave', clearPreview);

            //Clic para colocar barco
            board.addEventListener('click', e => {
                if (!selectedShip) {
                    alert('Primero selecciona un barco.');
                    return;
                }

                const cell = e.target.closest('.cell');
                if (!cell) return;

                const row = +cell.dataset.row;
                const col = +cell.dataset.col;
                const fp = footprint(row, col);
                const ok = validate(fp);

                if (!ok) {
                    clearPreview(); renderPreview(fp, false);
                    alert('Posición inválida o solapada.');
                    return;
                }

                form.elements['ShipType'].value = selectedShip;
                form.elements['Row'].value = row;
                form.elements['Col'].value = col;
                form.elements['Direction'].value = direction;
                form.submit();
            });

            //Cambiar dirección (botones y teclas)
            document.querySelectorAll('input[name="direction"]').forEach(r =>
                r.addEventListener('change', () => { direction = r.value; clearPreview(); })
            );

            window.addEventListener('keydown', e => {
                const k = e.key.toLowerCase();
                if (k === 'h'){ direction = 'Right'; document.getElementById('dirH').checked = true; clearPreview(); }
                if (k === 'v'){ direction = 'Down';  document.getElementById('dirV').checked = true; clearPreview(); }
            });

            //Cuando cambia el barco seleccionado, actualiza longitud y preview
            select.addEventListener('change', () => {
                selectedShip = select.value;
                clearPreview();
            });
        })();
    </script>
}


