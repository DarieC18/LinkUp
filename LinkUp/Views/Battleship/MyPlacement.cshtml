@model LinkUp.Application.ViewModels.Battleship.MyPlacementVm
@{
    ViewData["Title"] = "Colocación";
    var size = Model.BoardSize <= 0 ? 10 : Model.BoardSize;
    var selectedShip = (string)(ViewBag.SelectedShip ?? "Destroyer");
}

<style>
    /* --- Layout del tablero --- */
    :root {
        --board-max: min(68vmin, 520px);
        --cell-gap: 4px;
    }

    #board {
        display: grid;
        grid-template-columns: repeat(var(--cells), 1fr);
        grid-auto-rows: 1fr;
        gap: var(--cell-gap);
        width: var(--board-max);
        aspect-ratio: 1/1;
        background: #f8fafc;
        padding: 6px;
        border: 1px solid #e5e7eb;
        border-radius: .5rem;
    }

        #board .cell {
            width: 100%;
            height: 100%;
            border: 1px solid #e5e7eb;
            border-radius: .35rem;
            transition: background-color .08s ease, outline-color .08s ease;
        }

            #board .cell.preview-ok {
                background: #d1fae5;
                outline: 2px solid #10b981;
            }
            /* verde */

            #board .cell.preview-bad {
                background: #fee2e2;
                outline: 2px solid #ef4444;
            }
            /* rojo  */

            #board .cell.occupied {
                background: #cbd5e1 !important;
            }
    /* gris */
</style>

<h2 class="mb-3">Tablero de colocación</h2>

<div class="alert alert-info">
    Selecciona una celda y la dirección para posicionar tu barco:
    <strong id="shipName">@selectedShip</strong>.
</div>

<div class="row g-4 align-items-start">
    <!-- Tablero -->
    <div class="col-12 col-md-auto">
        <div id="board" style="--cells:@size;">
            @for (var r = 0; r < size; r++)
            {
                for (var c = 0; c < size; c++)
                {
                    var hasShip = Model.MyShips[r, c];
                    <button type="button"
                            class="cell btn p-0 @(hasShip ? "occupied" : "btn-light")"
                            data-row="@r" data-col="@c"
                            aria-label="fila @r, col @c">
                    </button>
                }
            }
        </div>
    </div>

    <!-- Panel lateral -->
    <div class="col-12 col-md-5 col-lg-4">
        <div class="card shadow-sm">
            <div class="card-body">
                <h5 class="card-title mb-3">Controles</h5>

                <div class="mb-3">
                    <label class="form-label d-block">Dirección</label>
                    <div class="btn-group" role="group">
                        <input type="radio" class="btn-check" name="direction" id="dirH" value="Right" autocomplete="off" checked>
                        <label class="btn btn-outline-primary" for="dirH">Horizontal</label>

                        <input type="radio" class="btn-check" name="direction" id="dirV" value="Down" autocomplete="off">
                        <label class="btn btn-outline-primary" for="dirV">Vertical</label>
                    </div>
                    <div class="form-text">Tip: teclas <kbd>H</kbd>/<kbd>V</kbd> para cambiar.</div>
                </div>

                <div class="small text-muted mb-3">
                    Vista previa: <span class="text-success fw-semibold">verde</span> = válido,
                    <span class="text-danger fw-semibold">rojo</span> = inválido.
                </div>

                <div class="mb-3">
                    <span class="badge bg-secondary me-1">Carrier 5</span>
                    <span class="badge bg-secondary me-1">Battleship 4</span>
                    <span class="badge bg-secondary me-1">Cruiser 3</span>
                    <span class="badge bg-secondary me-1">Submarine 3</span>
                    <span class="badge bg-secondary me-1">Destroyer 2</span>
                </div>

                <button class="btn btn-outline-secondary" onclick="history.back()">Volver</button>
            </div>
        </div>
    </div>
</div>

<!-- Form oculto -->
<form id="placeForm" method="post" action="@Url.Action("PlaceShip","Battleship")" class="d-none">
    @Html.AntiForgeryToken()
    <input type="hidden" name="GameId" value="@Model.GameId" />
    <input type="hidden" name="ShipType" value="@selectedShip" />
    <input type="hidden" name="Row" />
    <input type="hidden" name="Col" />
    <input type="hidden" name="Direction" />
</form>

@section Scripts {
    <script>
        (() => {
          const size = @size;
          const selectedShip = '@selectedShip';
          const SHIP_LENGTH = { Carrier: 5, Battleship: 4, Cruiser: 3, Submarine: 3, Destroyer: 2 };
          const length = SHIP_LENGTH[selectedShip] ?? 3;

          const form  = document.getElementById('placeForm');
          const board = document.getElementById('board');
          const cells = [...board.querySelectorAll('.cell')];

          let direction = 'Right'; // 'Right' | 'Down'
          const get = (r,c) => board.querySelector(`.cell[data-row="${r}"][data-col="${c}"]`);
          const inBounds = (r,c) => r >= 0 && r < size && c >= 0 && c < size;
          const isOccupied = (r,c) => get(r,c)?.classList.contains('occupied');

          function clearPreview(){
            cells.forEach(el => el.classList.remove('preview-ok','preview-bad'));
            cells.forEach(el => el.style.outline='');
          }

          function footprint(row, col){
            const fp = [];
            for (let i=0; i<length; i++){
              const rr = direction === 'Right' ? row     : row + i;
              const cc = direction === 'Right' ? col + i : col;
              fp.push([rr,cc]);
            }
            return fp;
          }

          function validate(fp){
            for (const [r,c] of fp){
              if (!inBounds(r,c)) return false;
              if (isOccupied(r,c)) return false;
            }
            return true;
          }

          function renderPreview(fp, ok){
            for (const [r,c] of fp){
              const cell = get(r,c);
              if (!cell) continue;
              cell.classList.add(ok ? 'preview-ok' : 'preview-bad');
            }
          }

          board.addEventListener('mousemove', (e) => {
            const cell = e.target.closest('.cell');
            if (!cell) return;
            clearPreview();
            const fp = footprint(+cell.dataset.row, +cell.dataset.col);
            renderPreview(fp, validate(fp));
          });

          board.addEventListener('mouseleave', clearPreview);

          board.addEventListener('click', (e) => {
            const cell = e.target.closest('.cell');
            if (!cell) return;

            const row = +cell.dataset.row;
            const col = +cell.dataset.col;
            const fp  = footprint(row, col);
            const ok  = validate(fp);

            if (!ok){
              clearPreview(); renderPreview(fp, false);
              alert('Posición inválida: el barco se sale del tablero o se solapa con otro.');
              return;
            }

            form.elements['Row'].value = row;
            form.elements['Col'].value = col;
            form.elements['Direction'].value = direction;
            form.submit();
          });

          window.addEventListener('keydown', (e) => {
            const k = e.key.toLowerCase();
            if (k === 'h'){ direction = 'Right'; document.getElementById('dirH').checked = true; clearPreview(); }
            if (k === 'v'){ direction = 'Down';  document.getElementById('dirV').checked = true; clearPreview(); }
          });

          document.querySelectorAll('input[name="direction"]').forEach(r =>
            r.addEventListener('change', () => { direction = r.value; clearPreview(); })
          );
        })();
    </script>
}
