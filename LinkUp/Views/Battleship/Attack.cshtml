@model LinkUp.Application.ViewModels.Battleship.AttackVm
@{
    ViewData["Title"] = "Ataque";
    var size = Model.BoardSize <= 0 ? 10 : Model.BoardSize;
}

<link rel="stylesheet" href="~/css/battleship.css" />

<h2 class="mb-3">Fase de ataque</h2>

<div class="alert alert-info">
    @Model.TurnMessage
</div>

<div class="d-flex flex-column align-items-center">
    <div id="board" style="--cells:@size;">
        @for (var r = 0; r < size; r++)
        {
            for (var c = 0; c < size; c++)
            {
                var state = Model.AttackState[r, c];
                string cellClass = "cell";
                if (state == 1) cellClass += " hit";
                else if (state == 0) cellClass += " miss";

                <button type="button"
                        class="@cellClass"
                        data-row="@r" data-col="@c"
                        aria-label="fila @r, col @c">
                </button>
            }
        }
    </div>

    <div class="mt-4 d-flex flex-wrap gap-3">
        <form method="post" action="@Url.Action("Surrender","Battleship")">
            @Html.AntiForgeryToken()
            <input type="hidden" name="gameId" value="@Model.GameId" />
            <button class="btn btn-danger" type="submit">Rendirse</button>
        </form>

        <a href="@Url.Action("Attack", "Battleship", new { gameId = Model.GameId })"
           class="btn btn-outline-primary">Refrescar pantalla</a>

        @if (Model.IsGameFinished)
        {
            <a href="@Url.Action("OpponentBoard", "Battleship", new { gameId = Model.GameId })"
               class="btn btn-outline-secondary">Ver tablero del oponente</a>
        }
        else
        {
            <a href="@Url.Action("MyPlacement", "Battleship", new { gameId = Model.GameId })"
               class="btn btn-outline-secondary">Ver mi tablero</a>
        }

        <a href="@Url.Action("Index", "Battleship")" class="btn btn-outline-dark">Volver</a>
    </div>

</div>

@section Scripts {
    <script>
        (() => {
            const size = @size;
            const gameId = '@Model.GameId';
            const isMyTurn = @Model.IsMyTurn.ToString().ToLower();

            if (!isMyTurn) {
                console.log("No es tu turno, tablero bloqueado.");
                return;
            }

            const board = document.getElementById('board');

            board.addEventListener('click', async (e) => {
                const cell = e.target.closest('.cell');
                if (!cell) return;
                if (cell.classList.contains('hit') || cell.classList.contains('miss')) return;

                const row = +cell.dataset.row;
                const col = +cell.dataset.col;

                const formData = new FormData();
                formData.append('GameId', gameId);
                formData.append('Row', row);
                formData.append('Col', col);

                const response = await fetch('@Url.Action("DoAttack", "Battleship")', {
                    method: 'POST',
                    body: formData
                });

                location.reload();
            });
        })();
    </script>
}
