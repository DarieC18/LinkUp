<script>
    (() => {
      if (window.__feedInlineInit) return;
      window.__feedInlineInit = true;

      // Helpers
      const $  = (sel, root=document) => root.querySelector(sel);
      const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));

      function getAntiToken(fromEl) {
        const local = fromEl?.closest("form")?.querySelector("input[name='__RequestVerificationToken']");
        if (local?.value) return local.value;
        const global = document.querySelector("input[name='__RequestVerificationToken']");
        return global?.value || "";
      }

      function normalizeReactionData(raw) {
        if (!raw || typeof raw !== "object") return { likeCount: 0, dislikeCount: 0, state: null };
        return {
          likeCount: raw.likeCount ?? raw.LikeCount ?? 0,
          dislikeCount: raw.dislikeCount ?? raw.DislikeCount ?? 0,
          state: raw.state ?? raw.State ?? null
        };
      }

      const ctxOf = (el) => el?.closest("[data-context]")?.dataset?.context || "";

      if (typeof window.postFormWithToken !== "function") {
        window.postFormWithToken = async (form, actionUrl) => {
          const fd = new FormData(form);
          const token = getAntiToken(form);
          if (token && !fd.has("__RequestVerificationToken"))
            fd.append("__RequestVerificationToken", token);
          return await fetch(actionUrl || form.action, {
            method: "POST",
            headers: { "X-Requested-With": "XMLHttpRequest" },
            body: fd
          });
        };
      }

      const reloadTimers = new Map();
      function debounceReload(postId, fn, delay=120) {
        const key = String(postId);
        const prior = reloadTimers.get(key);
        if (prior) clearTimeout(prior);
        const t = setTimeout(() => fn(), delay);
        reloadTimers.set(key, t);
      }

      // Cargar hilo de comentarios
      async function loadThread(postId, ctx, hostRoot=document) {
        const host = hostRoot.querySelector(`[data-comments][data-post-id="${postId}"]`)
                  || document.querySelector(`[data-comments][data-post-id="${postId}"]`);
        if (!host) return;

        const url = `/Comments/Thread?postId=${encodeURIComponent(postId)}${ctx ? `&ctx=${encodeURIComponent(ctx)}` : ""}`;
        try {
          const res = await fetch(url, { headers: { "X-Requested-With": "XMLHttpRequest" } });
          host.innerHTML = res.ok ? await res.text() : `<div class="text-danger">Error al cargar comentarios (${res.status})</div>`;
          try {
            if (window.jQuery && window.jQuery.validator && window.jQuery.validator.unobtrusive) {
              window.jQuery.validator.unobtrusive.parse(host);
            }
          } catch {}
        } catch (err) {
          console.error("Thread fetch error", err);
          host.innerHTML = `<div class="text-danger">Error de red al cargar comentarios</div>`;
        }
      }

      document.addEventListener("DOMContentLoaded", () => {
        $$("[data-comments][data-post-id]").forEach(div => {
          loadThread(div.dataset.postId, ctxOf(div), document);
        });
      });

      // Reacciones (Like / Dislike)
    
      document.addEventListener("click", async (e) => {
        const btn = e.target.closest("[data-react]");
        if (!btn) return;

        e.preventDefault();

        const card   = btn.closest("[data-post-card]") || btn.closest("[data-post]");
        const postId = btn.dataset.postId || card?.dataset.postId;
        const rtype  = btn.dataset.react;
        if (!card || !postId || !rtype) return;

        if (btn.dataset.busy === "1") return;
        btn.dataset.busy = "1";

        const likeBtn     = card.querySelector("[data-react='like']");
        const dislikeBtn  = card.querySelector("[data-react='dislike']");
        const likeSpan    = card.querySelector("[data-like-count]");
        const dislikeSpan = card.querySelector("[data-dislike-count]");
        const label       = card.querySelector("[data-reaction-label]");

        const currentState = card.dataset.currentState || "none";
        const counts = {
          like:    parseInt(likeSpan?.textContent ?? "0", 10) || 0,
          dislike: parseInt(dislikeSpan?.textContent ?? "0", 10) || 0
        };

        let nextState = currentState;
        let nextCounts = { ...counts };

        if (rtype === "like") {
          if (currentState === "disliked") {
            nextCounts.dislike = Math.max(0, nextCounts.dislike - 1);
            nextCounts.like    = nextCounts.like + 1;
          } else if (currentState === "none") {
            nextCounts.like    = nextCounts.like + 1;
          }
          nextState = "liked";
        } else if (rtype === "dislike") {
          if (currentState === "liked") {
            nextCounts.like    = Math.max(0, nextCounts.like - 1);
            nextCounts.dislike = nextCounts.dislike + 1;
          } else if (currentState === "none") {
            nextCounts.dislike = nextCounts.dislike + 1;
          }
          nextState = "disliked";
        }

        if (likeSpan)    likeSpan.textContent    = String(nextCounts.like);
        if (dislikeSpan) dislikeSpan.textContent = String(nextCounts.dislike);

        if (nextState === "liked") {
          likeBtn?.classList.add("d-none");
          dislikeBtn?.classList.remove("d-none");
          if (label) { label.textContent = "Me gusta"; label.classList.remove("d-none"); }
        } else if (nextState === "disliked") {
          dislikeBtn?.classList.add("d-none");
          likeBtn?.classList.remove("d-none");
          if (label) { label.textContent = "No me gusta"; label.classList.remove("d-none"); }
        } else {
          likeBtn?.classList.remove("d-none");
          dislikeBtn?.classList.remove("d-none");
          label?.classList.add("d-none");
        }
        card.dataset.currentState = nextState;

        try {
          const fd = new FormData();
          const token = getAntiToken(btn);
          if (token) fd.append("__RequestVerificationToken", token);

          const res = await fetch(`/Posts/React/${postId}?type=${encodeURIComponent(rtype)}`, {
            method: "POST",
            headers: { "X-Requested-With": "XMLHttpRequest" },
            body: fd
          });

          if (res.ok) {
            const text = await res.text();
            if (text && text.trim().length) {
              try {
                const data = normalizeReactionData(JSON.parse(text));
                if (likeSpan)    likeSpan.textContent    = String(data.likeCount);
                if (dislikeSpan) dislikeSpan.textContent = String(data.dislikeCount);

                if (data.state === "liked") {
                  likeBtn?.classList.add("d-none");
                  dislikeBtn?.classList.remove("d-none");
                  if (label) { label.textContent = "Me gusta"; label.classList.remove("d-none"); }
                  card.dataset.currentState = "liked";
                } else if (data.state === "disliked") {
                  dislikeBtn?.classList.add("d-none");
                  likeBtn?.classList.remove("d-none");
                  if (label) { label.textContent = "No me gusta"; label.classList.remove("d-none"); }
                  card.dataset.currentState = "disliked";
                } else {
                  likeBtn?.classList.remove("d-none");
                  dislikeBtn?.classList.remove("d-none");
                  label?.classList.add("d-none");
                  card.dataset.currentState = "none";
                }
              } catch {}
            }
          } else {
            console.warn("React failed", res.status);
          }
        } catch (err) {
          console.error("React error", err);
        } finally {
          delete btn.dataset.busy;
        }
      });

      // Comentarios: Create / Edit / Reply
      document.addEventListener("submit", async (e) => {
        // --- Create ---
        const form = e.target.closest("form[data-comment-form]");
        if (form) {
          e.preventDefault();

          const host   = form.closest("[data-comments]");
          const postId = host?.dataset.postId || form.dataset.postId || form.querySelector("[name='PostId']")?.value;
          if (!postId) return;

          const fd = new FormData(form);
          const token = getAntiToken(form);
          if (token && !fd.has("__RequestVerificationToken")) fd.append("__RequestVerificationToken", token);

          try {
            const res = await fetch(form.action || form.getAttribute("action") || "/Comments/Create", {
              method: "POST",
              headers: { "X-Requested-With": "XMLHttpRequest" },
              body: fd
            });
            if (!res.ok) { console.warn("Create comment failed", res.status); return; }

            const input = form.querySelector("[name='Content']");
            if (input) input.value = "";
            const ctx = ctxOf(form);
            debounceReload(postId, () => loadThread(postId, ctx));
          } catch (err) {
            console.error("Create comment error", err);
          }
          return;
        }

        // --- Edit ---
        const formEdit = e.target.closest("form[data-edit-form], form.js-edit-form");
        if (formEdit) {
          e.preventDefault();
          const host   = formEdit.closest("[data-comments]");
          const postId = host?.dataset.postId || formEdit.querySelector("[name='PostId']")?.value;
          if (!postId) return;

          try {
            const res = await postFormWithToken(formEdit, formEdit.action || "/Comments/Edit");
            if (res.ok) debounceReload(postId, () => loadThread(postId, ctxOf(formEdit)));
            else console.warn("Edit failed", res.status);
          } catch (err) {
            console.error("Edit comment error", err);
          }
          return;
        }

        // --- Reply ---
        const formReply = e.target.closest("form[data-reply-form], form.js-reply-form");
        if (formReply) {
          e.preventDefault();
          const host   = formReply.closest("[data-comments]");
          const postId = host?.dataset.postId || formReply.dataset.postId || formReply.querySelector("[name='PostId']")?.value;
          if (!postId) return;

          try {
            const res = await postFormWithToken(formReply, formReply.action || "/Comments/Reply");
            if (res.ok) {
              formReply.reset();
              debounceReload(postId, () => loadThread(postId, ctxOf(formReply)));
            } else {
              console.warn("Reply failed", res.status);
            }
          } catch (err) {
            console.error("Reply comment error", err);
          }
          return;
        }
      });

      // Delete (posts & comments) con modal global
      const modalEl  = document.getElementById("confirmDeleteModal");
      const modalBtn = document.getElementById("confirmDeleteBtn");
      const modalMsg = document.getElementById("confirmDeleteMessage");
      const bsModal  = (modalEl && window.bootstrap) ? bootstrap.Modal.getOrCreateInstance(modalEl) : null;
      let pendingForm = null;

      document.addEventListener("submit", (e) => {
        const f = e.target.closest("form[data-confirm], form[data-confirm-message], form[data-delete-kind], form.js-confirm");
        if (!f) return;

        if (f.__confirmed === true) return;

        e.preventDefault();
        e.stopPropagation();

        const msg = f.getAttribute("data-confirm-message")
                  || f.getAttribute("data-confirm")
                  || f.getAttribute("data-message")
                  || "¿Seguro que deseas eliminar este elemento?";

        if (bsModal) {
          pendingForm = f;
          if (modalMsg) modalMsg.textContent = msg;
          bsModal.show();
        } else {
          if (confirm(msg)) doAjaxDelete(f);
        }
      }, true);

      modalBtn?.addEventListener("click", () => {
        if (!pendingForm) return;
        doAjaxDelete(pendingForm);
        bsModal?.hide();
        pendingForm = null;
      });

      async function doAjaxDelete(form) {
        try {
          const action = form.getAttribute("action") || form.getAttribute("formaction") || form.action;
          if (!action) return console.warn("Delete form sin action");

          const fd = new FormData(form);
          const token = getAntiToken(form);
          if (token && !fd.has("__RequestVerificationToken"))
            fd.append("__RequestVerificationToken", token);

          const res = await fetch(action, {
            method: "POST",
            headers: { "X-Requested-With": "XMLHttpRequest" },
            body: fd
          });

          if (!res.ok) { console.warn("Delete failed", res.status); return; }

          const kind = form.getAttribute("data-delete-kind")
                     || (form.closest("[data-comments]") ? "comment" : "post");

          if (kind === "post") {
            (form.closest("[data-post-card]") || form.closest(".post-card") || form.closest(".card"))?.remove();
          } else {
            const host   = form.closest("[data-comments]");
            const postId = host?.dataset.postId || form.querySelector("[name='PostId']")?.value;
            if (!postId) return;
            debounceReload(postId, () => loadThread(postId, ctxOf(form)));
          }

          form.__confirmed = true;
        } catch (err) {
          console.error("Delete error", err);
        }
      }

      // Toggles (editar / reply)

      document.addEventListener("click", (e) => {
        // Edit toggle
        const tEdit = e.target.closest("[data-edit-toggle], .js-edit-toggle");
        if (tEdit) {
          const id   = tEdit.dataset.id || tEdit.getAttribute("data-target-id");
          const sel1 = `form[data-edit-form][data-id="${id}"]`;
          const sel2 = `form.js-edit-form[data-id="${id}"]`;
          const form = document.querySelector(sel1) || document.querySelector(sel2);
          if (form) {
            form.classList.toggle("d-none");
            (form.querySelector("textarea, input[type='text']") || form).focus?.();
          }
          return;
        }
        // Reply toggle
        const tReply = e.target.closest("[data-reply-toggle], .js-reply-toggle");
        if (tReply) {
          const parent = tReply.dataset.parent || tReply.getAttribute("data-target-id");
          const sel1 = `form[data-reply-form][data-parent="${parent}"]`;
          const sel2 = `form.js-reply-form[data-parent="${parent}"]`;
          const form = document.querySelector(sel1) || document.querySelector(sel2);
          if (form) {
            form.classList.toggle("d-none");
            (form.querySelector("textarea, input[type='text']") || form).focus?.();
          }
          return;
        }
      });

      // Form de publicación en Home: toggle & validación
      (function initPostCreateForm() {
        const form   = document.getElementById('postCreateForm');
        if (!form) return;

        const txt    = form.querySelector('textarea[name="Content"]')   || document.getElementById('postContent');
        const sel    = form.querySelector('select[name="MediaType"]')   || document.getElementById('mediaType');
        const imgBox = document.getElementById('imageWrap');
        const ytBox  = document.getElementById('ytWrap');
        const fImg   = form.querySelector('input[name="ImageFile"]')    || document.getElementById('imageFile');
        const fUrl   = form.querySelector('input[name="YouTubeUrl"]')   || document.getElementById('youTubeUrl');

        const YT = /^(https?:\/\/)?(www\.)?(youtube\.com\/watch\?v=[\w\-]{6,}|youtu\.be\/[\w\-]{6,})/i;

        function applyVisibility() {
          const v = (sel?.value || '').toLowerCase();

          if (imgBox) imgBox.hidden = true;
          if (ytBox)  ytBox.hidden  = true;

          if (fImg) { fImg.required = false; fImg.disabled = true; }
          if (fUrl) { fUrl.required = false; fUrl.disabled = true; }

          if (v === 'image') {
            if (imgBox) imgBox.hidden = false;
            if (fImg) { fImg.required = true; fImg.disabled = false; }
            if (fUrl) fUrl.value = '';
          } else if (v === 'video') {
            if (ytBox) ytBox.hidden = false;
            if (fUrl) { fUrl.required = true; fUrl.disabled = false; }
            if (fImg) fImg.value = '';
          }
        }

        sel?.addEventListener('change', applyVisibility);
        applyVisibility();

        form.addEventListener('submit', (e) => {
          let ok = true;

          if (!txt?.value?.trim()) {
            ok = false;
            alert('El texto de la publicación es obligatorio.');
          }

          const v = (sel?.value || '').toLowerCase();
          if (v === 'image') {
            if (!fImg?.files || fImg.files.length === 0) {
              ok = false;
              alert('Debes seleccionar una imagen.');
            } else if (fImg.files[0].size > 5_000_000) {
              ok = false;
              alert('La imagen no puede superar los 5 MB.');
            }
          } else if (v === 'video') {
            const url = (fUrl?.value || '').trim();
            if (!url || !YT.test(url)) {
              ok = false;
              alert('Debes colocar un enlace de YouTube válido.');
            }
          } else {
            ok = false;
            alert('Selecciona el tipo de medio (Imagen o Video).');
          }

          if (!ok) e.preventDefault();
        });
      })();

    })();
</script>
